#include <gtest/gtest.h>
#include "../../Aesi.h"
#include "../generation.h"
#include <cryptopp/integer.h>

TEST(Signed_Boolean, ThreeWayComparasion) {
    constexpr auto testsAmount = 2, blocksNumber = 8;
    for (std::size_t i = 0; i < testsAmount; ++i) {
        const auto l = ((i % 4) > 1 ? 1 : -1) * Generation::getRandomWithBits(blocksNumber * 32 - 20),
                r = ((i % 4) < 2 ? 1 : -1) * Generation::getRandomWithBits(blocksNumber * 32 - 20);
        Aesi<blocksNumber * 32> lA = l, rA = r;
        EXPECT_EQ(lA < rA, l < r);
        EXPECT_EQ(lA <= rA, l <= r);
        EXPECT_EQ(lA > rA, l > r);
        EXPECT_EQ(lA >= rA, l >= r);
        EXPECT_EQ(lA == rA, l == r);
    }
}

TEST(Signed_Boolean, DifferentPrecisions) {
    // unsigned long long iv = 9112537908201049656;
    // Aesi < 256 > o1 = iv; Aesi < 288 > o2 = iv; Aesi < 320 > o3 = iv; Aesi < 352 > o4 = iv; Aesi < 384 > o5 = iv; Aesi < 416 > o6 = iv; Aesi < 448 > o7 = iv; Aesi < 480 > o8 = iv; Aesi < 512 > o9 = iv; Aesi < 544 > o10 = iv;
    // EXPECT_EQ(o1, o2); EXPECT_EQ(o1, o3); EXPECT_EQ(o1, o4); EXPECT_EQ(o1, o5); EXPECT_EQ(o1, o6); EXPECT_EQ(o1, o7);
    // EXPECT_EQ(o1, o8); EXPECT_EQ(o1, o9); EXPECT_EQ(o1, o10);EXPECT_EQ(o2, o1); EXPECT_EQ(o2, o3); EXPECT_EQ(o2, o4); EXPECT_EQ(o2, o5); EXPECT_EQ(o2, o6); EXPECT_EQ(o2, o7);
    // EXPECT_EQ(o2, o8); EXPECT_EQ(o2, o9); EXPECT_EQ(o2, o10); EXPECT_EQ(o3, o1); EXPECT_EQ(o3, o2); EXPECT_EQ(o3, o4); EXPECT_EQ(o3, o5); EXPECT_EQ(o3, o6); EXPECT_EQ(o3, o7); EXPECT_EQ(o3, o8); EXPECT_EQ(o3, o9); EXPECT_EQ(o3, o10); EXPECT_EQ(o4, o1); EXPECT_EQ(o4, o2); EXPECT_EQ(o4, o3);
    // EXPECT_EQ(o4, o5); EXPECT_EQ(o4, o6); EXPECT_EQ(o4, o7); EXPECT_EQ(o4, o8); EXPECT_EQ(o4, o9); EXPECT_EQ(o4, o10); EXPECT_EQ(o5, o1); EXPECT_EQ(o5, o2); EXPECT_EQ(o5, o3); EXPECT_EQ(o5, o4); EXPECT_EQ(o5, o6); EXPECT_EQ(o5, o7); EXPECT_EQ(o5, o8); EXPECT_EQ(o5, o9); EXPECT_EQ(o5, o10);
    // EXPECT_EQ(o6, o1); EXPECT_EQ(o6, o2); EXPECT_EQ(o6, o3); EXPECT_EQ(o6, o4); EXPECT_EQ(o6, o5); EXPECT_EQ(o6, o7); EXPECT_EQ(o6, o8); EXPECT_EQ(o6, o9); EXPECT_EQ(o6, o10); EXPECT_EQ(o7, o1); EXPECT_EQ(o7, o2); EXPECT_EQ(o7, o3); EXPECT_EQ(o7, o4); EXPECT_EQ(o7, o5); EXPECT_EQ(o7, o6);
    // EXPECT_EQ(o7, o8); EXPECT_EQ(o7, o9); EXPECT_EQ(o7, o10); EXPECT_EQ(o8, o1); EXPECT_EQ(o8, o2); EXPECT_EQ(o8, o3); EXPECT_EQ(o8, o4); EXPECT_EQ(o8, o5); EXPECT_EQ(o8, o6); EXPECT_EQ(o8, o7); EXPECT_EQ(o8, o9); EXPECT_EQ(o8, o10); EXPECT_EQ(o9, o1); EXPECT_EQ(o9, o2); EXPECT_EQ(o9, o3);
    // EXPECT_EQ(o9, o4); EXPECT_EQ(o9, o5); EXPECT_EQ(o9, o6); EXPECT_EQ(o9, o7); EXPECT_EQ(o9, o8); EXPECT_EQ(o9, o10); EXPECT_EQ(o10, o1); EXPECT_EQ(o10, o2); EXPECT_EQ(o10, o3); EXPECT_EQ(o10, o4); EXPECT_EQ(o10, o5); EXPECT_EQ(o10, o6); EXPECT_EQ(o10, o7); EXPECT_EQ(o10, o8); EXPECT_EQ(o10, o9);
    //
    // EXPECT_EQ(o1, 9112537908201049656ULL); EXPECT_EQ(o2, 9112537908201049656ULL); EXPECT_EQ(o3, 9112537908201049656ULL); EXPECT_EQ(o4, 9112537908201049656ULL); EXPECT_EQ(o5, 9112537908201049656ULL);
    // EXPECT_EQ(o6, 9112537908201049656ULL); EXPECT_EQ(o7, 9112537908201049656ULL); EXPECT_EQ(o8, 9112537908201049656ULL); EXPECT_EQ(o9, 9112537908201049656ULL); EXPECT_EQ(o10, 9112537908201049656ULL);
    // EXPECT_GT(o1, 9112537908201000000ULL); EXPECT_GT(o2, 9112537908201000000ULL); EXPECT_GT(o3, 9112537908201000000ULL); EXPECT_GT(o4, 9112537908201000000ULL); EXPECT_GT(o5, 9112537908201000000ULL);
    // EXPECT_GT(o6, 9112537908201000000ULL); EXPECT_GT(o7, 9112537908201000000ULL); EXPECT_GT(o8, 9112537908201000000ULL); EXPECT_GT(o9, 9112537908201000000ULL); EXPECT_GT(o10, 9112537908201000000ULL);
    // EXPECT_LT(o1, 9999999999999999999ULL); EXPECT_LT(o2, 9999999999999999999ULL); EXPECT_LT(o3, 9999999999999999999ULL); EXPECT_LT(o4, 9999999999999999999ULL); EXPECT_LT(o5, 9999999999999999999ULL);
    // EXPECT_LT(o6, 9999999999999999999ULL); EXPECT_LT(o7, 9999999999999999999ULL); EXPECT_LT(o8, 9999999999999999999ULL); EXPECT_LT(o9, 9999999999999999999ULL); EXPECT_LT(o10, 9999999999999999999ULL);
    //
    // Aesi < 608 > w0 = "3893509674364240296565817966808751172691002783248199782541334351863333341009161236129113001785247442885856708616220103577302425545750798795713950025251102.";
    // Aesi < 832 > w1 = "1904621738309688096963972747021004236006856501929784086088263854997343616028245335782672717133232796105937497394115918619762108507459190371110761436019731.";
    // EXPECT_EQ(w0 > w1, true); EXPECT_EQ(w0 < w1, false); EXPECT_EQ(w0 == w1, false); EXPECT_EQ(w0 <= w1, false); EXPECT_EQ(w0 >= w1, true);

    Aesi < 832 > w2 = "-0x1EB651E8ACA7DBB7D7AA485F3FEB2DF33908F679F803E97A52D65DD5933AFD196870992F433FFCA43E3C9143572A7636A12E674469F5284EB3795569BD714209.";
    Aesi < 928 > w3 = "-0xB0E41DBA3874A14776D1AEC13F135D9073DC86BF5280F0CC50CB5BE87C619715F6C4223377EA6BE98AEACAD4247629084E387A3DAB1FD214F71186707E80E87D.";
    EXPECT_EQ(w2 > w3, false);
    EXPECT_EQ(w2 < w3, true);
    EXPECT_EQ(w2 == w3, false);
    EXPECT_EQ(w2 <= w3, true);
    EXPECT_EQ(w2 >= w3, false);

    Aesi < 672 > w4 = "8579827921780022714884547290034378163774108129266616834606286594438931625536525596709068697345341040201100448364689826680071893580936937957610052613081503.";
    Aesi < 704 > w5 = "4353932857600256560604450130831729241817180433084663548890401953025274643710608816125275143869421043054941642599587128920529537059916068803843833176187770.";
    EXPECT_EQ(w4 > w5, true); EXPECT_EQ(w4 < w5, false); EXPECT_EQ(w4 == w5, false); EXPECT_EQ(w4 <= w5, false); EXPECT_EQ(w4 >= w5, true);

    Aesi < 576 > w6 = "-837363882469384814164952858984059650355806238701150383913125321024093714315545932995066845284083699573306282442802270246233059081589269545802183534735843.";
    Aesi < 704 > w7 = "-7731750803156293935191942144055527377474680976937305234083822329607259619397574929801911408641020544442317524152432769460529344525963935880147268229930508.";
    EXPECT_EQ(w6 > w7, false); EXPECT_EQ(w6 < w7, true); EXPECT_EQ(w6 == w7, false); EXPECT_EQ(w6 <= w7, true); EXPECT_EQ(w6 >= w7, false);

    Aesi < 704 > w8 = "7536263050490565784722454436897360691124905272644727501491606897904633953254516480728770377343185025733063180690756799587717934894237741180009108826737672.";
    Aesi < 960 > w9 = "9785117833891594297302388093439791408341957957429923557391375696070213737091713543379508965659146178208818274995583845378946146343828812972191399400454209.";
    EXPECT_EQ(w8 > w9, false); EXPECT_EQ(w8 < w9, true); EXPECT_EQ(w8 == w9, false); EXPECT_EQ(w8 <= w9, true); EXPECT_EQ(w8 >= w9, false);

    Aesi < 928 > w10 = "-2331423915028866101033025839817989074357888329399814943542917056620393570067871432936269852626341295886857789978014171435135791877059796516711485550203465.";
    Aesi < 672 > w11 = "-7745825910141249499725353135181692628097643206488293885369721934127831738767685201042473212522535630556399221231683431142973470757582916543147215295832944.";
    EXPECT_EQ(w10 > w11, false); EXPECT_EQ(w10 < w11, true); EXPECT_EQ(w10 == w11, false); EXPECT_EQ(w10 <= w11, true); EXPECT_EQ(w10 >= w11, false);

    Aesi < 672 > w12 = "6010689247913118750914877951714565850358068476829349002827096996500473540734241191493186757836276265003354018849837858648044157237137147977356603462247976.";
    Aesi < 896 > w13 = "11766646147627630263492856923292408536109594279314009411863240172215973616085233468086875968110723620529952527224499208633039077550993487371141270612368284.";
    EXPECT_EQ(w12 > w13, false); EXPECT_EQ(w12 < w13, true); EXPECT_EQ(w12 == w13, false); EXPECT_EQ(w12 <= w13, true); EXPECT_EQ(w12 >= w13, false);

    Aesi < 960 > w14 = "-8949677366818190842842495948207569603637256225586182954474638379962428855694788650192065845847312450317154319571908874868168565693565381410614023897487213.";
    Aesi < 640 > w15 = "-6792756248103380558712593145548796869130188720614777583924722213964574779639694879660794884491993053072747273195944643404339093226397445288317353333298087.";
    EXPECT_EQ(w14 > w15, true); EXPECT_EQ(w14 < w15, false); EXPECT_EQ(w14 == w15, false); EXPECT_EQ(w14 <= w15, false); EXPECT_EQ(w14 >= w15, true);

    Aesi < 896 > w16 = "4853564780444502345664478180652531083639882443619084538577328261540801292330371663846790980477997252068354682938446302512986164360263653532392761778201023.";
    Aesi < 736 > w17 = "6770098789183303901383314637059158698365510308472153618337470099663190699149619628833529996140272095038275426499167720943531633548912498771362668845338366.";
    EXPECT_EQ(w16 > w17, false); EXPECT_EQ(w16 < w17, true); EXPECT_EQ(w16 == w17, false); EXPECT_EQ(w16 <= w17, true); EXPECT_EQ(w16 >= w17, false);

    Aesi < 864 > w18 = "-5123332965425726020415728284273984554396243365593103938510645377065224253429268341674095065301111253055817672749359490965436163881090516328866147747617388.";
    Aesi < 832 > w19 = "-3348664783594785907997655989843079164997608599512229561090714178899335579893590368913874350327704267510582884132085125234569970394461817996218403044545554.";
    EXPECT_EQ(w18 > w19, true); EXPECT_EQ(w18 < w19, false); EXPECT_EQ(w18 == w19, false); EXPECT_EQ(w18 <= w19, false); EXPECT_EQ(w18 >= w19, true);
}
