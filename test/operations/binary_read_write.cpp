#include <gtest/gtest.h>
#include "../../Aesi.h"

TEST(Binary, BinaryRead) {
    {
        std::array<unsigned, 8> blocks = { 0b01101011010000101111100000110001, 0b01111010111010010110110010001001, 0b01010100000011010000000110100111, 0b01011000011100010000101000101000, 0b01000001111100100110000011110111, 0b01001001101010011110100000000010, 0b01001001111011001110111011000110, 0b01101000010010110101111111110111,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0110101101000010111110000011000101111010111010010110110010001001010101000000110100000001101001110101100001110001000010100010100001000001111100100110000011110111010010011010100111101000000000100100100111101100111011101100011001101000010010110101111111110111");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01000001000110101110000011101011, 0b01011011101011001011101000100001, 0b01010100110001111010110101110010, 0b01110111010100011000111000101110, 0b01010111011100101110010100111000, 0b01101101010101001010001011110111, 0b01110100000010111111000001000000, 0b01101000011110010110111110010111,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0100000100011010111000001110101101011011101011001011101000100001010101001100011110101101011100100111011101010001100011100010111001010111011100101110010100111000011011010101010010100010111101110111010000001011111100000100000001101000011110010110111110010111");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01001110100110110100011010001001, 0b01001011001110100001000010111010, 0b01010000011101001110011110111100, 0b01010000111000011100011001010100, 0b01010110100110000110010101001100, 0b01010100111001111111100011110000, 0b01001100001110001000011100100110, 0b01011100011100010110011111001100,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0100111010011011010001101000100101001011001110100001000010111010010100000111010011100111101111000101000011100001110001100101010001010110100110000110010101001100010101001110011111111000111100000100110000111000100001110010011001011100011100010110011111001100");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01001111111001001011111110101110, 0b01011100110110101110010100001111, 0b01000011110001001001011010001010, 0b01010111110101111101111110011011, 0b01010110001001000100001010100101, 0b01001101100100001100010010000111, 0b01001100001000011001100100001110, 0b01000001001101111000001001011001,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0100111111100100101111111010111001011100110110101110010100001111010000111100010010010110100010100101011111010111110111111001101101010110001001000100001010100101010011011001000011000100100001110100110000100001100110010000111001000001001101111000001001011001");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01110010001110100111110011010100, 0b01100110111111101100110100001101, 0b01011000111010001111001001110111, 0b01110000011011000100000101110101, 0b01101001011101000101010011001100, 0b01111111001011000111110100110101, 0b01101100110100001100001101001000, 0b01011101000011001110011101111101,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0111001000111010011111001101010001100110111111101100110100001101010110001110100011110010011101110111000001101100010000010111010101101001011101000101010011001100011111110010110001111101001101010110110011010000110000110100100001011101000011001110011101111101");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01001010010101101000011101101010, 0b01101000110100100001010001010111, 0b01011111010100001101011010001001, 0b01000110001011010010100101100111, 0b01011111101100101001110101000101, 0b01000001011000010011110000111000, 0b01100010010111110011100010000010, 0b01100101110001011110111010100100,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0100101001010110100001110110101001101000110100100001010001010111010111110101000011010110100010010100011000101101001010010110011101011111101100101001110101000101010000010110000100111100001110000110001001011111001110001000001001100101110001011110111010100100");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01010000110100000110011001001100, 0b01101001101101011101001101010011, 0b01001011001011011100001001010110, 0b01010010110010110010100100010000, 0b01110000100000011001111100010110, 0b01100000101011110000110001010101, 0b01010000101110001110000010110010, 0b01110110000101001111111100101010,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0101000011010000011001100100110001101001101101011101001101010011010010110010110111000010010101100101001011001011001010010001000001110000100000011001111100010110011000001010111100001100010101010101000010111000111000001011001001110110000101001111111100101010");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01011000000100101011101111111101, 0b01011011010001100001010110011111, 0b01001011110110100100110011001001, 0b01110111110111001010011100111110, 0b01010111000111000101011000111000, 0b01011110111001101100100111001110, 0b01101101001101100010010011011111, 0b01111110111100110000101000110000,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0101100000010010101110111111110101011011010001100001010110011111010010111101101001001100110010010111011111011100101001110011111001010111000111000101011000111000010111101110011011001001110011100110110100110110001001001101111101111110111100110000101000110000");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01111100010100001011010011101000, 0b01010001101001000100001100000011, 0b01011100001111011000010001101100, 0b01100001101111011110110000000001, 0b01110100100010001011100001111010, 0b01101111001101101011100111011010, 0b01011100010100100001100100000110, 0b01100000110100011010110110110011,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0111110001010000101101001110100001010001101001000100001100000011010111000011110110000100011011000110000110111101111011000000000101110100100010001011100001111010011011110011011010111001110110100101110001010010000110010000011001100000110100011010110110110011");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01010100110011000101100110011110, 0b01110111001101000101110000111101, 0b01001000111111100000101000000011, 0b01010001000010001101100111010010, 0b01001010111100000101110010110110, 0b01111101100110110010001000010111, 0b01110010000001101011111111100111, 0b01000101001001000000010010100111,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0101010011001100010110011001111001110111001101000101110000111101010010001111111000001010000000110101000100001000110110011101001001001010111100000101110010110110011111011001101100100010000101110111001000000110101111111110011101000101001001000000010010100111");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01100011000000110000010011011001, 0b01011000011000100001000000000101, 0b01111010111111010010000011011101, 0b01110001000000000011011011011011, 0b01000111011110011001010111100110, 0b01010110000110001110111001101110, 0b01110101100011111111010000100100, 0b01010101011011100101011100101101,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0110001100000011000001001101100101011000011000100001000000000101011110101111110100100000110111010111000100000000001101101101101101000111011110011001010111100110010101100001100011101110011011100111010110001111111101000010010001010101011011100101011100101101");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01011111101010111001100111010010, 0b01000111000011011000010010101001, 0b01000001111111001001001000001100, 0b01111111111100110010000000110010, 0b01101110101100101111101110110001, 0b01101000000100110001000101111100, 0b01000100001011001000010001010111, 0b01110000000100111010010001001000,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0101111110101011100110011101001001000111000011011000010010101001010000011111110010010010000011000111111111110011001000000011001001101110101100101111101110110001011010000001001100010001011111000100010000101100100001000101011101110000000100111010010001001000");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01000111000101111000000111010110, 0b01101000100101001100000101110000, 0b01101000011011001001110000011100, 0b01111011011001111101011101011000, 0b01000110110000011000110011011101, 0b01011101110100010010101010111000, 0b01010001000110011001011110010000, 0b01011101100101010000000010110110,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0100011100010111100000011101011001101000100101001100000101110000011010000110110010011100000111000111101101100111110101110101100001000110110000011000110011011101010111011101000100101010101110000101000100011001100101111001000001011101100101010000000010110110");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01010000111010011000011011011101, 0b01110000100000101001000000111110, 0b01111010011000010011110001111100, 0b01011111110101101110010010001011, 0b01101111101111110011111111111000, 0b01010000000110001110011011000001, 0b01100101110000010000100011001111, 0b01111001011010000111000011110011,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0101000011101001100001101101110101110000100000101001000000111110011110100110000100111100011111000101111111010110111001001000101101101111101111110011111111111000010100000001100011100110110000010110010111000001000010001100111101111001011010000111000011110011");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01100001010100000110100010001100, 0b01100111001101000111010110010001, 0b01010011010101110010001110000011, 0b01001100010001100000011011001111, 0b01000110101101010111001000101001, 0b01011010011011101101000001110010, 0b01000000101001111011111010001000, 0b01011111101010111100111001000111,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0110000101010000011010001000110001100111001101000111010110010001010100110101011100100011100000110100110001000110000001101100111101000110101101010111001000101001010110100110111011010000011100100100000010100111101111101000100001011111101010111100111001000111");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01010110011001111010010100111111, 0b01001100001010111100010101101110, 0b01010110011101011010011011010011, 0b01110100000101100100111000101111, 0b01101010111110011110101010100101, 0b01000010111111011101101111010111, 0b01101010110110010100111110100001, 0b01001010011100100111001010111011,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0101011001100111101001010011111101001100001010111100010101101110010101100111010110100110110100110111010000010110010011100010111101101010111110011110101010100101010000101111110111011011110101110110101011011001010011111010000101001010011100100111001010111011");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01100110101010000001100101001111, 0b01111110010010010101111111001101, 0b01010010010010001000100010000110, 0b01111001011101000001100110111001, 0b01000101010111010011001110110000, 0b01110001100110110000111000111011, 0b01000111001000011110011111111010, 0b01010101011110000000010111100101,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0110011010101000000110010100111101111110010010010101111111001101010100100100100010001000100001100111100101110100000110011011100101000101010111010011001110110000011100011001101100001110001110110100011100100001111001111111101001010101011110000000010111100101");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01000101100001100011101001001101, 0b01010111110000110000011001010100, 0b01010011010110001010110001111010, 0b01101010011110010110110111111111, 0b01111000000001111010010101000000, 0b01001101011011010001011101010111, 0b01100010110011110110101100100000, 0b01100100110111000000110010100111,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0100010110000110001110100100110101010111110000110000011001010100010100110101100010101100011110100110101001111001011011011111111101111000000001111010010101000000010011010110110100010111010101110110001011001111011010110010000001100100110111000000110010100111");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01111000101100001000010111110010, 0b01001110100011101001111101000101, 0b01011100111011000001000000101101, 0b01110101111001110101110101111100, 0b01100000110011101101111110001101, 0b01101010111010000000111000111001, 0b01101100000101010010001111000101, 0b01100101101001111001011101010011,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0111100010110000100001011111001001001110100011101001111101000101010111001110110000010000001011010111010111100111010111010111110001100000110011101101111110001101011010101110100000001110001110010110110000010101001000111100010101100101101001111001011101010011");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01001011111110100111011110110100, 0b01110000111000100000011011011110, 0b01010111101111111110100001000100, 0b01110010100010001110111100011011, 0b01111000011111001011000001100100, 0b01011010010010101110000100011111, 0b01001110011001110100000100101000, 0b01101111000100010111110101111001,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0100101111111010011101111011010001110000111000100000011011011110010101111011111111101000010001000111001010001000111011110001101101111000011111001011000001100100010110100100101011100001000111110100111001100111010000010010100001101111000100010111110101111001");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01011011010011000100110101101011, 0b01011100001111110011001010101100, 0b01001011000101000100001100010100, 0b01010010011101111111110010101100, 0b01100101101011010100011001011010, 0b01100011011000010010111010100011, 0b01111100011111110010010001110001, 0b01111110100110000000101000011001,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0101101101001100010011010110101101011100001111110011001010101100010010110001010001000011000101000101001001110111111111001010110001100101101011010100011001011010011000110110000100101110101000110111110001111111001001000111000101111110100110000000101000011001");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01110100101011010100010011110111, 0b01000110011101011100011001110110, 0b01001011010000000010001000000100, 0b01111111011100001101100111011111, 0b01001110110101001000001011000101, 0b01000010010000011111010111010000, 0b01001111010101101001010011011100, 0b01000110111001100001111100011001,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0111010010101101010001001111011101000110011101011100011001110110010010110100000000100010000001000111111101110000110110011101111101001110110101001000001011000101010000100100000111110101110100000100111101010110100101001101110001000110111001100001111100011001");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01010100000001001111001110110011, 0b01110011000011100110110011000111, 0b01111010010110010000110000000100, 0b01001001011101000001110000010010, 0b01111100001111110111000011110111, 0b01001100000100001111010111100100, 0b01011111001111111111100010011111, 0b01011100101000110000111011110100,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0101010000000100111100111011001101110011000011100110110011000111011110100101100100001100000001000100100101110100000111000001001001111100001111110111000011110111010011000001000011110101111001000101111100111111111110001001111101011100101000110000111011110100");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01010101001111100010110001101000, 0b01101001011010001000001010011111, 0b01001100011100111000010011001001, 0b01000011100111011011101111110100, 0b01011000010111101100100001101000, 0b01000011101110111011101101001011, 0b01110101010010001111000100001000, 0b01101000111011000110110111100100,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0101010100111110001011000110100001101001011010001000001010011111010011000111001110000100110010010100001110011101101110111111010001011000010111101100100001101000010000111011101110111011010010110111010101001000111100010000100001101000111011000110110111100100");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01000010110110100000101100101000, 0b01010101100100011110000000001000, 0b01000010011000101101110111001101, 0b01010010110101000000011111100000, 0b01111110111100111010110110000101, 0b01010000101101110010000010001100, 0b01001100111011000001100011010000, 0b01110001100000010101001011010110,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0100001011011010000010110010100001010101100100011110000000001000010000100110001011011101110011010101001011010100000001111110000001111110111100111010110110000101010100001011011100100000100011000100110011101100000110001101000001110001100000010101001011010110");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01000010000110110100101100101011, 0b01110001000111001010101110110110, 0b01100100100000111011011101101001, 0b01011010111011010100100011111010, 0b01000100111101110010011110001111, 0b01100001111110011011110011010100, 0b01100011011010000000010110010010, 0b01000101001110001011110011110000,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0100001000011011010010110010101101110001000111001010101110110110011001001000001110110111011010010101101011101101010010001111101001000100111101110010011110001111011000011111100110111100110101000110001101101000000001011001001001000101001110001011110011110000");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01110010010011111111100100100011, 0b01111011011001100001001000001101, 0b01100111101110010111100000110111, 0b01010100011011101000110011000000, 0b01101100100010111111111111110110, 0b01001011110101101110000100100011, 0b01111011000101101100001001001011, 0b01100110110000010001010100100110,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0111001001001111111110010010001101111011011001100001001000001101011001111011100101111000001101110101010001101110100011001100000001101100100010111111111111110110010010111101011011100001001000110111101100010110110000100100101101100110110000010001010100100110");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01110100011111001000010100000110, 0b01101001101000011011011011011110, 0b01111010110010001011001111100000, 0b01110001110111011010001000010100, 0b01010010001011101001111010110000, 0b01001101000110001000001001111100, 0b01100000011110000001011100000000, 0b01010100110000010001001001100000,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0111010001111100100001010000011001101001101000011011011011011110011110101100100010110011111000000111000111011101101000100001010001010010001011101001111010110000010011010001100010000010011111000110000001111000000101110000000001010100110000010001001001100000");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01001011010110001111011010111101, 0b01100010110111000000000011100011, 0b01100111001011001110110100110011, 0b01100101101110001011011011101110, 0b01101110101010001001111010101110, 0b01110011110110101111011110001001, 0b01011101110010011001001110010110, 0b01010110010000010100011010100000,  };
        std::stringstream ss; for(auto& block: blocks) ss.write(reinterpret_cast<const char*>(&block), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, true);
        EXPECT_EQ(a, "0b0100101101011000111101101011110101100010110111000000000011100011011001110010110011101101001100110110010110111000101101101110111001101110101010001001111010101110011100111101101011110111100010010101110111001001100100111001011001010110010000010100011010100000");
    }
    {
        std::array<unsigned, 8> blocks = { 0b01011011011010000011111011000100, 0b01001111011000000001100001101000, 0b01110110100010011101011000111110, 0b01100000100011000010011001100110, 0b01001100011101011001100010110100, 0b01000111111000011100110101000111, 0b01110001110101100000000100010001, 0b01010010100001101010010100110111,  };
        std::stringstream ss; for(auto it = blocks.rbegin(); it != blocks.rend(); ++it) ss.write(reinterpret_cast<const char*>(&*it), sizeof(unsigned)); Aesi<256> a; a.readBinary(ss, false);
        EXPECT_EQ(a, "0b0101101101101000001111101100010001001111011000000001100001101000011101101000100111010110001111100110000010001100001001100110011001001100011101011001100010110100010001111110000111001101010001110111000111010110000000010001000101010010100001101010010100110111");
    }
}

TEST(Binary, BinaryWrite) {
    {
        Aesi<256> l = "0b1000101101001010100110101101100111101011111110000110010001000000101101100011101101110111011110101111001101110000011001101110010101001000010000010010001000011111010111111111000000100001110110111001000111000111100000000001100100110011111100110110000000100110", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b1010000101000101100011011111111100101010011111110100110101101000100011111000110000010101000101001011101010001111100011000111111110110001010110111111010110110110100111101000001000111100011011001110010011100010110011001011010110111000100111100110011101010100", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b1001000011101000000001110101111010101110101100110111111101011001010000101110100101000111010011011111001010110000100101001111110011000101011010010011000111011111011011111010111111111011100101110011100010000011101001101001100100001010101101001100111000011101", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0000000101101100100000010010011100010101001110101001010111011101001111100100110000101100011000101001110101101110100111000101001111001001011101001111010100010010001101011101111111100100000101110100000001111000011010011110111101101001011000010011010101011101", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0111000000100011101100110010000101101010101011101010110101101011001001100011110101011111101011000000111110111110100101101101101010101000111110101101110100111011111000100111110101010110110011110010001010100011111010000010000100100111100000001101010110111010", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0110000011101000001111101101010011010100010000011111001000101100100110111101100111101101111001000111001011100100101110110111100001110110111110011100000001111000111111101100010010101100101110001110111011110010011011111001000101100001101101111010101011001011", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b1011010101111011100000011110000100010100001010010000101100110010101111010111011011110000111100101000101101111101100001010011101000101011111011001101011100001011011101110010010101110011100100011101111110110110010000101001111110111010100001100011110111011100", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0011101101101000000010000000000100000011010101100110010001101000000001110001101001011011100011101111100100001110100110111101001110000001110110011010001011001101110111010000101001100011101111001001000010000010101011110111111011010101110011010111010111011100", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b1010101010000111110100000110100100010101011101111111111011100111101101100100101110010010101111011010011001110110100001111010001001111001111001000001011110100011101010110010100001011101100101100000100100111001011011010000010011111001000000001011001111100010", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0101010000010001110101011100011001001001110110100101011001011111010101000011011101111100011011010111001011111010111111111111110011110011111000100011001111101011100010010011100011011100111010111100011001000101100110011111001101101010010000111111111110111100", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0110101111101100111111011100100011111001110111101000110111101110000110000110011011011111111111001001111001010010001011100101111001111001100110010000000011011111011000111001000001010110000101010001000101011011101110001111001101101101000111111011011111000010", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0101000010011101001011001010001110110101001011000001110100101000101010110101001101011101101011110111101001000000000000101110100110101110101111010111101010001011100101010011100101011110101111110000011000001011000010101000100000000000011001001010100001010110", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0010010001111010010011001101101000110000010001011110100000000110100011111010000011101100001100011110111011011000000011011100010101000010001100110011001010010100001011110000110101001111111000001101001110000101110101100110010110110000101010100000110110011000", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0110100000001001010110101010001110111111110100100111000110011000100111101101011001010001000101111101101001010110110000011101000010000110101000011000101111000001111111000111101100000010101011101010111011001000100101010010111101011011010100011001110110111111", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b1001110011010010001110001010011010111000110001011110111010011011110101101100110101010110010001001001110010100100000001001011011111111011000001101101101101011010110100011011010010101011000011011010010100011000110000000010111000111000110110000101111010111011", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0111110000100101001011010111111011001101111010111100011100011011111010011001000111000101111001101010011010010010101011010111010100011110111011110001001001000101110100001100110110111101101001010000111011111101110100010110101101101100100011010011000110000001", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b1111001010011101001000110000110110110110110001010100101010110011010111101000111100000001011111000100001101111011100111010000100100101001110101111111100111111100010111100001101001101110101010000100011111111001001010111101111100000101100011011111110101100110", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0101110100000101111010101000010010100100001010111110011000010010110110011001101100110010101111011011011011110011010110001100111001001110001011101000111111011110111010100000001010100101100100010011100010011011100010111001000011110100101100011011111000111110", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0011011000100010010010111010100000000010111110111110000000101100101010111101010110010000111011111000110000100011110001110100010110111111010001010001110100000000110001000110101010001011000011111011011110011100101110110101101010010111100010101101101011100010", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0101100110010000110101001100100101011001101010110100000111100001111001100011011100110000001111111110111001110001101101001011001000111111110000000110110111100110101101010101101010111110011010010100010001010101101000101101000011100110110000010000110110000100", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0101111011110001111000110001010001101000110000111101001000101010110001110000101100011001101010111100100000010110000010001110000101101101101100111001101011101101111011101000101111000011101001100011110001110010110011001011001111010011000110101111111110101011", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0101010001111111000100010110110011010100111100010101100010101100011001001010010000110000110101011100010011010010000110010001001001110111011100111111110100011111001101000011010101000001110000000111100100001011111100011100101101001001101101101110011010100011", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b1010111101101111110011110010100010111100010101100101101001001010111000100100110000011101111011111001110101000100000101101000101110010111111111001011100011011101110000011011101010000001001001111111000000011110101011111100000101000010101101100010110111001111", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0000111110101001101010111111001100011110110010111111110101100110100011010001110111011010100011000101001001010111111110011010001001000110101000010011011001111011100010111110110100000000100011101001110111001101001110000100010001000111011111011000010100111010", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0010110110110100011011010000110100010000011101001011110110110010001111111011000010100101101001110101011111001001001101000001011111001000111101011111101011101110010000001001000111111010010000101111100000011011100100111010011001100000100100111010111110100101", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b1000001010001011100011101110100100100111010111101111000001010100101001101010001010110011001111111000011111010101110000011010111100011111001001111100000010110011110111010001001011101111011100011011110101110101001101111101101011100011001111101101111011100100", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0100010011101000000110100100100100111110011110000000101111101000011101010010110111110001001010000110010110010011010101000101000000000001001011101010001010111010100100001100000101111110111100000101111000011111011101111011100100111000000000011101111000000000", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b1110110110011000001110011101101010000110010100111010101101001111010011011110101100000111101100110000010001011110101011111100111110101100010101011011111010101011010001001000001011101110010001110010101111011100110000001111011001110101011011101011011111011100", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b1100001110010001100001000001011001111011111100011101110001010010110000101111111010100011111011111011000101011110110111101101110011010100011110011111011000101001111100011111111101101111110100110110011001011111110011110000010000100001000011110001011101101001", r {};
        std::stringstream ss; l.writeBinary(ss, false); unsigned temp {};
        for(unsigned i = 0; i < 8; ++i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
    {
        Aesi<256> l = "0b0111111111010011100110101111111011111110111011100101001000010100010101111110011001111110111110111100100010110001111001110100101101000001111010011110001001111111011101111101010101101010000001010001001101110100100101110110000101101000101000111111101101000100", r {};
        std::stringstream ss; l.writeBinary(ss, true); unsigned temp {};
        for(long long i = 7; i >= 0; --i) {
            ss.read(reinterpret_cast<char*>(&temp), sizeof(unsigned));
            r.setBlock(i, temp);
        }
        EXPECT_EQ(l, r);
    }
}